{
  "scss": {
    "enforce": true,
    "description": "Use SCSS for all styling. No inline styles or CSS modules."
  },
  "variables": {
    "colors": "Always use predefined SCSS color variables from the project (e.g., $primary-color, $text-color, etc.). Never use hex, RGB, or named colors directly.",
    "font-size": "Always use font size variables from SCSS (e.g., $font-small, $font-medium). Do not hardcode font sizes."
  },
  "layout": {
    "useFlex": true,
    "useGrid": false,
    "description": "Use Flexbox for all layout structures. Do not use CSS Grid."
  },
  "classNaming": {
    "globalClassnames": false,
    "fileScopedNaming": true,
    "description": "No global class names. Use BEM-like or file-scoped naming tied to the component or SCSS file."
  },
  "formatting": {
    "consistent": true,
    "description": "Always follow consistent code formatting: spacing, brackets, indentation (2 spaces), etc."
  },
  "namingConvention": {
    "scss": "Use kebab-case for SCSS class names scoped to component. Example: .product-card__image",
    "js": "Use camelCase for JS variables and functions."
  },
  "structure": {
    "scssFolderStructure": "Use separate SCSS files for each component. e.g., Button.scss, Header.scss inside a 'styles' or 'components' folder.",
    "importMethod": "Import SCSS using relative path at the top of each component."
  },
  "theme": {
    "designReference": "Use the FrostWP example theme (https://frostwp.com/example/) as a reference for UI aesthetics and style.",
    "description": "Match spacing, typography, and component feel with FrostWP's light, minimal, white, and cool UI design."
  },
  "comments": {
    "required": false,
    "description": "Add comments only for non-obvious logic. Do not overcomment."
  },
  "responsiveDesign": {
    "description": "Ensure all UI components and layouts are fully responsive and adapt smoothly to different screen sizes including desktop, tablet, and mobile. Use fluid widths, flexible flexbox layouts, and media queries as needed."
  },
  "pageModulesStructure": {
    "description": "For each page, place the main JSX component inside a dedicated 'modules' folder within the pageâ€™s directory. For example, 'app/product/[slug]/modules/ProductView.jsx'. Follow this structure consistently across the project."
  },
  "reuseComponents": {
    "description": "Identify repetitive UI code or logic and refactor it into reusable components inside the 'components' folder. Avoid duplication by reusing these components across pages and modules."
  },
  "mobileFirstDesign": {
    "description": "Use mobile-first UI design approach. Start styling and layout for the smallest screen sizes first, then progressively enhance for larger screens using media queries."
  },
  "globalColorUsage": {
    "description": "Always use global SCSS color variables defined in '/assets/stylesheets/_variables.scss'. Do not hardcode color values. Import the file in all SCSS modules that need access to global colors."
  },
  "globalJSImports": {
    "description": "Always use global import aliases in JS/JSX files instead of relative imports. Configure path aliases (e.g., @components, @utils, @styles) in jsconfig.json or tsconfig.json and use them consistently to import shared modules, utils, constants, config files, contexts, and global styles."
  },
  "componentStructure": {
    "description": "Each component or module must reside in its own folder containing two files: 'index.js' for the JSX logic and 'style.module.scss' for scoped styles. Do not separate these files into different directories. Keep both in the same folder for clarity and maintainability."
  },
  "globalStyleImportInLayout": {
    "description": "Always import global SCSS variables from '/assets/stylesheets/_variables.scss' into 'layout.js' at the top of the file to ensure global design tokens like colors and font sizes are available project-wide."
  },
  "autoIncludeGlobalSCSS": {
    "description": "Do not manually import SCSS variables like '@import \"../../assets/stylesheets/variables\";' in each SCSS file. Instead, configure global style inclusion via 'sassOptions.additionalData' in 'next.config.js' so variables are available globally."
  },
  "modularPageStructure": {
    "description": "Do not write page logic directly inside the 'app/page.js' file. Instead, use the 'modules/' folder at the root level. Each feature or page should reside inside a folder within 'modules/', containing 'index.js' and 'style.module.scss'. The 'app/page.js' file should only handle routing, layout wrappers, or redirects."
  },
  "usePlaceholderImages": {
    "description": "Use https://placehold.co/ for all placeholder images in the codebase. Define width, height, background, text color, and text where appropriate."
  },
  "removeAllComments": {
    "description": "Remove all comments from the entire codebase, including JS/JSX and SCSS files."
  }
}
